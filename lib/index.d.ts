export const readConfigRequest: "ReadConfig-Request";
export const readConfigResponse: "ReadConfig-Response";
export const readUnprotectedConfigRequest: "ReadUnprotectedConfig-Request";
export const readUnprotectedConfigResponse: "ReadUnprotectedConfig-Response";
export const writeConfigRequest: "WriteConfig-Request";
export const writeConfigResponse: "WriteConfig-Response";
export const writeUnprotectedConfigRequest: "WriteUnprotectedConfig-Request";
export const writeUnprotectedConfigResponse: "WriteUnprotectedConfig-Response";
export const deleteConfigRequest: "DeleteConfig-Request";
export const deleteConfigResponse: "DeleteConfig-Response";
export const deleteUnprotectedConfigRequest: "DeleteUnprotectedConfig-Request";
export const deleteUnprotectedConfigResponse: "DeleteUnprotectedConfig-Response";
export const savePasskeyRequest: "SavePasskey-Request";
export const savePasskeyResponse: "SavePasskey-Response";
export const useConfigInMainRequest: "UseConfigInMain-Request";
export const useConfigInMainResponse: "UseConfigInMain-Response";
export const useUnprotectedConfigInMainRequest: "UseUnprotectedConfigInMain-Request";
export const useUnprotectedConfigInMainResponse: "UseUnprotectedConfigInMain-Response";
export default class Store {
    constructor(options: any);
    options: any;
    fileData: any;
    initialFileData: any;
    initialFileDataParsed: boolean;
    unprotectedFileData: any;
    initialUnprotectedFileData: any;
    initialUnprotectedFileDataParsed: boolean;
    iv: any;
    mainLog: string;
    rendererLog: string;
    ivFile: any;
    validSendChannels: string[];
    validReceiveChannels: string[];
    getIv(fs: any): boolean;
    preloadBindings(ipcRenderer: any, fs: any): {
        path: any;
        unprotectedPath: any;
        setPasskey: (passkey: any) => void;
        initial: () => any;
        initialUnprotected: () => any;
        send: (channel: any, key: any, value: any) => void;
        onReceive: (channel: any, func: any) => void;
        clearRendererBindings: () => void;
    };
    mainBindings(ipcMain: any, browserWindow: any, fs: any, mainProcessCallback?: any, unprotectedMainProcessCallback?: any): void;
    mainInitialStore(fs: any): any;
    clearMainBindings(ipcMain: any): void;
    sanitizePath(path: any): any;
}
